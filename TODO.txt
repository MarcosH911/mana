Replace img with Image                                  --> DONE
Redesign to fit in max-w-7xl - Don't use static height  --> DONE
Create 3 more pages like Pricing                        --> faq, pricing, sing in + 3: Company (about us, mission, vision, values, News, ), Products (physic calendar, extension of software), Contact us            --> DONE
Use links
1. Put pages in the head of page
Dark mode                                               --> DONE

---------------------------------------------------------------------

Move every section in landing page to its own component
  Do the same with the rest of pages (Landing Page, Company, faq, contact-us)                    --> DONE                                      

Finish Button component          --> DONE
Add a new property to button - color --> DONE
Replace all buttons with custom Button  --> DONE

Create new reusable components
- Alert Dialog (You don't need to click the button for it to appear, it's just there) (https://ui.shadcn.com/docs/components/alert-dialog)       --> DONE
- Avatar (https://ui.shadcn.com/docs/components/avatar)           --> DONE
- Badge (https://ui.shadcn.com/docs/components/badge)             --> DONE
- Input (https://ui.shadcn.com/docs/components/input)             --> DONE
- Label (https://ui.shadcn.com/docs/components/label)             --> DONE
- Progress (https://ui.shadcn.com/docs/components/progress)       --> DONE
- Table (https://ui.shadcn.com/docs/components/table)             --> DONE
  data: {invoice: string; status: string; method: string; amount: number}[]

Create a new component for each navigation item <NavItem text="Company" href="/company" />                                                       --> DONE



change all w and h by p: tengo solo:                --> DONE
- al inicio de la página: h-screen w-screen     
- altura de hr (0.5) o 1
- tamaño del div de un texto de landing page

create remaining pages      
fix table component 








Understand the Todo app
Understand useState and rerenders
Understand useEffect and use cases
Understand Array.map() and Array.filter()
Understand spread operator



Blog
Inputs
  Title
  Text
  Tags
    Create tags
    The app starts with no tags. The user creates tags and then has the ability to select them
  IsRead
  Add
  
Pages
  Something like this but the pages should be the size of the screen https://ui.shadcn.com/docs/components/carousel
  First page is to add new blog posts
  Next pages are the blogs that aren't read
  The user should have the ability to navigate through the unread blog posts by clicking arrow buttons.
  
  const [pageNumber, setPageNumber] = useState<number>(0)
  Button with onClick to set page number to one less
  Button with onClick to set page number to one more
  Conditionally render the page you're in
  {
    pageNumber === 0 ? <WriteBlogPost />
    : <BlogPost blogPost={blogPosts[pageNumber - 1]} />
  }
  
   BlogPost {
    title
    text
    selectedTags: string[]
    isRead
  }

  (to insert in local storage)
  data  {
    pageNumber
    allTags
    blogPosts: BlogPost[]
    
    (save the inputs in case of reload while writing)
    title
    text
    selectedTags
  }




https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker                                                      --> DONE

https://learnxinyminutes.com/docs/javascript/ 
- Popup: Function called with setTimeout(func , num000)
- access value of a key in object: this.key
- Change object with a function: adding or accessing values of it. const ... = func() {
  return something happens to this.key }

obj.func = func() //now ... : func() is in obj. 
- Do something with this.key: call, apply, bind
- create new object by: 
const constructor0 = {func(this... = ....);}; 
new constructor0(); // {.. : ....}
- make a prototype of an obj without changing it at all:
const prototype = {
  key1: value1
  func1: func() = {something happens to this.key_of_other_object}
}
obj.__proto__ = prototype // now prototype is part of obj and u can access their keys by using obj.prototype_key and obj has no even change
- access keys of obj with prototype and keys of prototype: (for in obj)
- access keys of original obj: for in obj{ if (obj.hasOwnProperty)}
- change value ob obj: obj.key = new value


https://learnxinyminutes.com/docs/typescript/
- Math.sqrt(), Math.pow()
- functions and constants can also have types
- static?: constants, variables that are "sticked" static .. to an obj. You cannot create another object obj1 and call it with it. obj1...
- implement?: implement the values of an interface in a data type. 
- extend: inherit or extends the behavior of another one --> useful for parent id in answer
- readonly: read 
- for..in statement: iterates over keys returns values

Make twitter

Style twitter

https://learnxinyminutes.com/docs/sql/
CREATE, DROP, SELECT (* or Name) FROM (database), 
LIMIT, WHERE Name LIKE ...
ORDER BY title DESC
IN, NO IN, BETWEEN
MIN(), MAX(), COUNT(*), SUM(), AVG()
HAVING
order syntax: 
SELECT _ FROM _ JOIN _ ON _ WHERE _ GROUP BY _ HAVING _ ORDER BY _ UNION

(pgTable) https://orm.drizzle.team/docs/sql-schema-declaration
https://orm.drizzle.team/docs/column-types/pg
schema.ts
export const name = pgTable('Table_name', {
  column1: serial, text, varchar..
  ...:
})

https://orm.drizzle.team/docs/select
https://orm.drizzle.team/docs/insert
https://orm.drizzle.team/docs/update
https://orm.drizzle.team/docs/delete